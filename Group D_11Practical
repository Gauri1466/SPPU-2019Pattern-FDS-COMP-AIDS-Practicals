/*A palindrome is a string of character that‘s the same forward and backward. Typically, 
punctuation, capitalization, and spaces are ignored. For example, “Poor Dan is in a 
droop” is a palindrome, as can be seen by examining the characters “poor danisina 
droop” and observing that they are the same forward and backward. One way to check 
25 
for a palindrome is to reverse the characters in the string and then compare with them 
the original-in a palindrome, the sequence will be identical. Write C++ program with 
functions- 
a) To print original string followed by reversed string using stack 
b) To check whether given string is palindrome or not*/
#include<iostream>
#include<string>
using namespace std;
class Stack{
    public:
    const static int size=100;
    int top=-1;
    char array[size];
    void push(char x){
        if(top==size-1){
            cout<<"Stack Overflow!!!";
            return;
        }
        top++;
        array[top]=x;

    }
    char pop(){
        if(top==-1){
            cout<<"Stack is Underflow";
            return -1;
        }
        return array[top--];

    }
    int display(){
        if(top==-1){
            cout<<"Stack is empty";
        }
        else{
            for(int i=0;i<=top;i++){
                cout<<array[i]<<" ";
            }
        }
    }


};



int main(){
    Stack s;
    string str;
    cout<<"Enter string:";
    getline(cin,str);
    string org=" ";
    for(int i=0;i<str.size();i++){
        char ch = str[i];
        if((ch>= 'A' and ch <='Z') ){
        s.push(ch);}
        else if((ch >= 'a' and ch <= 'z')){
            ch=(char)(ch-'a'+'A');
        }
    }
    // s.display();
    cout<<"original string"<<" "<<str<<endl;
    string rev=" ";
    cout<<"Reversered string  ";
    while(s.top!=-1){
        rev.push_back(s.pop());

    }
    cout<<rev<<endl;


    // cout<<endl;
    // cout<<s.pop()<<endl;
    // cout<<s.pop();
    // cout<<endl;
    // s.display();


    return 0;
}

A double-ended queue (deque) is a linear list in which additions and deletions may be 
made at either end. Obtain a data representation mapping a deque into a one
dimensional array. Write C++ program to simulate deque with functions to add and 
delete elements from either end of the deque. 
#include <iostream>
using namespace std;

class Deque {
private:
    int *arr;
    int front;
    int rear;
    int capacity;
    
public:
    // Constructor to initialize the deque with a specific size
    Deque(int size) {
        capacity = size;
        arr = new int[capacity];
        front = -1;
        rear = -1;
    }

    // Destructor to free the allocated memory
    ~Deque() {
        delete[] arr;
    }

    // Check if the deque is full
    bool isFull() {
        return (front == 0 && rear == capacity - 1) || (front == rear + 1);
    }

    // Check if the deque is empty
    bool isEmpty() {
        return front == -1;
    }

    // Add an element to the front of the deque
    void addFront(int item) {
        if (isFull()) {
            cout << "Deque is full, cannot add element at the front!" << endl;
            return;
        }
        if (front == -1) { // Deque is empty
            front = rear = 0;
        } else if (front == 0) { // Wrap around
            front = capacity - 1;
        } else {
            front--;
        }
        arr[front] = item;
    }

    // Add an element to the rear of the deque
    void addRear(int item) {
        if (isFull()) {
            cout << "Deque is full, cannot add element at the rear!" << endl;
            return;
        }
        if (front == -1) { // Deque is empty
            front = rear = 0;
        } else if (rear == capacity - 1) { // Wrap around
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = item;
    }

    // Delete an element from the front of the deque
    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty, cannot delete element from the front!" << endl;
            return;
        }
        if (front == rear) { // Only one element in deque
            front = rear = -1;
        } else if (front == capacity - 1) { // Wrap around
            front = 0;
        } else {
            front++;
        }
    }

    // Delete an element from the rear of the deque
    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty, cannot delete element from the rear!" << endl;
            return;
        }
        if (front == rear) { // Only one element in deque
            front = rear = -1;
        } else if (rear == 0) { // Wrap around
            rear = capacity - 1;
        } else {
            rear--;
        }
    }

    // Display the elements of the deque
    void display() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return;
        }
        cout << "Deque elements: ";
        if (front <= rear) {
            for (int i = front; i <= rear; i++) {
                cout << arr[i] << " ";
            }
        } else {
            for (int i = front; i < capacity; i++) {
                cout << arr[i] << " ";
            }
            for (int i = 0; i <= rear; i++) {
                cout << arr[i] << " ";
            }
        }
        cout << endl;
    }
};

int main() {
    Deque dq(5);  // Create a deque with capacity 5
    
    // Add elements to the rear and front
    dq.addRear(10);
    dq.addRear(20);
    dq.addFront(5);
    dq.addFront(2);
    dq.addRear(30);
    
    // Display the deque
    dq.display();
    
    // Try to add another element to the full deque
    dq.addRear(40);
    
    // Delete elements from the front and rear
    dq.deleteFront();
    dq.deleteRear();
    
    // Display the deque after deletions
    dq.display();
    
    return 0;
}

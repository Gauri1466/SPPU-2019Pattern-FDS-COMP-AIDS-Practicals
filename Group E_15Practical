Pizza parlor accepting maximum M orders. Orders are served in first come first served 
basis. Order once placed cannot be cancelled. Write C++ program to simulate the system 
using circular queue using array.
#include <iostream>
#include <string>
using namespace std;

class PizzaParlor {
private:
    string *orders;  // Array to store orders
    int front, rear, capacity;

public:
    // Constructor to initialize the pizza parlor with capacity M
    PizzaParlor(int M) {
        capacity = M;
        orders = new string[capacity];
        front = rear = -1; // Initially, the queue is empty
    }

    // Destructor to clean up the allocated memory
    ~PizzaParlor() {
        delete[] orders;
    }

    // Function to check if the queue is full
    bool isFull() {
        return (rear + 1) % capacity == front;
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return front == -1;
    }

    // Function to place an order
    void placeOrder(string order) {
        if (isFull()) {
            cout << "Order queue is full! Cannot accept new orders." << endl;
            return;
        }
        if (front == -1) {
            front = 0;  // Queue is empty, so place the first order at the front
        }
        rear = (rear + 1) % capacity;  // Circular increment of rear pointer
        orders[rear] = order;
        cout << "Order placed: " << order << endl;
    }

    // Function to serve the next order
    void serveOrder() {
        if (isEmpty()) {
            cout << "No orders to serve!" << endl;
            return;
        }
        cout << "Serving order: " << orders[front] << endl;
        if (front == rear) {  // Only one order left
            front = rear = -1;  // Reset the queue to empty
        } else {
            front = (front + 1) % capacity;  // Circular increment of front pointer
        }
    }

    // Function to display the current orders in the queue
    void displayOrders() {
        if (isEmpty()) {
            cout << "No orders in the queue!" << endl;
            return;
        }
        cout << "Current orders in the queue: ";
        int i = front;
        while (i != rear) {
            cout << orders[i] << " ";
            i = (i + 1) % capacity;  // Circular increment
        }
        cout << orders[rear] << endl;  // Display the last order
    }
};

int main() {
    int M;
    cout << "Enter the maximum number of orders the pizza parlor can accept: ";
    cin >> M;

    PizzaParlor parlor(M);  // Create a pizza parlor with M orders capacity

    // Menu-driven simulation
    int choice;
    string order;
    do {
        cout << "\n1. Place an Order\n2. Serve an Order\n3. Display Orders\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                cout << "Enter the order details: ";
                cin.ignore();  // To consume the newline character from previous input
                getline(cin, order);  // Read the order (with spaces if any)
                parlor.placeOrder(order);
                break;

            case 2:
                parlor.serveOrder();
                break;

            case 3:
                parlor.displayOrders();
                break;

            case 4:
                cout << "Exiting the system. Thank you for using the Pizza Parlor!" << endl;
                break;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
